# Colourful ls output
eval $(dircolors)
LS_COLORS=$LS_COLORS":*.vhd=00;93:*.v=00;93:*.vp=00;93:*.vh=00;93:*.ngc=00;33:"

# Set PS1 variable
export PS1="\[\e[00;37m\]\u@\h:\w\\$ \[\e[0m\]"

# Highlighting function
function color
{
    grep * 2>&1
    grep --color "${1}\|$"
}

# Function to pipe into no-windowed emacs
function ep
{
    TMP=$(mktemp)
    cat > $TMP
    eval "emacs -nw $TMP" < /dev/tty
    rm $TMP
}

# Function to update some environment variables within the session from values of the new shell
function update_env_shared_tmux
{
    SESSION=$(tmux display-message -p "#S")
    export "$(tmux show-env -t $SESSION | grep DISPLAY)"
    export "$(tmux show-env -t $SESSION | grep SSH_CONNECTION)"
    export "$(tmux show-env -t $SESSION | grep SSH_AUTH_SOCK)"
}

# Function to call the environment update functions in all tmux windows currently running bash
function update_env_all_tmux_windows
{
    for WIN in $(tmux list-windows -F '#I')
    do
        TARGET=$(tmux display -p "#S"):$WIN
        CURRENT_CMD=$(tmux list-panes -F '#{pane_current_command}' -t $TARGET)
        if [ "${CURRENT_CMD}" == "bash" ]
        then
            tmux send-keys -t $TARGET update_env_shared_tmux C-m
        fi
    done
}

# Aliases for convenience
alias ls='ls --color=auto'
alias ll='ls -hl --time-style=long-iso'
alias grep='grep --color=auto'
alias e="emacs -nw"
alias emasc="emacs"
alias tig="tig --all"
alias gitk="gitk --all"
alias log="tail --retry --follow=name"
alias tree="tree -C"
alias gdiff="git diff --no-index"
alias uncolor="sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g'"
alias make="make -j $(grep -c processor /proc/cpuinfo)"
alias ps="ps -eo pid,user:16,pcpu,pmem,stat,args"
alias hg="history | grep"
alias ts="DISPLAY=:17 tmux new-session -t main \; set-option destroy-unattached on"
alias te="update_env_shared_tmux"
alias tw="update_env_all_tmux_windows"
alias please='sudo $(fc -ln -1)'

# 256 colors for terminal
export TERM="xterm-256color"

# Some other variables
export EDITOR="emacs -nw"
export LESS="-iR"

# Smart bash completion
if [ -f /etc/bash_completion ]; then
 . /etc/bash_completion
fi
